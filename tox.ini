# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
env_list = lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/mysql
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
set_env =
    PYTHONPATH = {[vars]src_path}:{tox_root}/lib
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
allowlist_externals =
    poetry

[testenv:build]
description = Build charm
set_env =
pass_env =
allowlist_externals =
    {[testenv]allowlist_externals}
    charmcraft
commands =
    poetry export --output requirements.txt
    charmcraft pack
    rm requirements.txt

[testenv:format]
description = Apply coding style standards to code
commands_pre =
    poetry install --only format
commands =
    poetry run isort {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
allowlist_externals =
    {[testenv]allowlist_externals}
    find
commands_pre =
    poetry install --only lint
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    poetry run codespell {[vars]all_path}
    # pflake8 wrapper supports config from pyproject.toml
    poetry run pflake8 {[vars]all_path}
    poetry run isort --check-only --diff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}
    find {[vars]all_path} -type f \( -name "*.sh" -o -name "*.bash" \) -exec poetry run shellcheck --color=always \{\} +

[testenv:unit]
description = Run unit tests
commands_pre =
    poetry install --only main,unit
commands =
    poetry run coverage run --source={[vars]src_path},{[vars]lib_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report
    poetry run coverage xml

[testenv:integration]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
    GITHUB_OUTPUT
    AWS_ACCESS_KEY
    AWS_SECRET_KEY
    GCP_ACCESS_KEY
    GCP_SECRET_KEY
commands_pre =
    poetry install --only main,integration
commands =
    poetry run pytest -v --tb native --log-cli-level=INFO -s --ignore={[vars]tests_path}/unit/ {posargs}
