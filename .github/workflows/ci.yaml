# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.
name: Tests

on:
  pull_request:
  schedule:
    - cron: '53 0 * * *' # Daily at 00:53 UTC
  # Triggered on push to branch "main" by .github/workflows/release.yaml
  workflow_call:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tox
        # TODO: Consider replacing with custom image on self-hosted runner OR pinning version
        run: python3 -m pip install tox
      - name: Run linters
        run: tox run -e lint

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tox
        # TODO: Consider replacing with custom image on self-hosted runner OR pinning version
        run: python3 -m pip install tox
      - name: Run tests
        run: tox run -e unit

  build:
    name: Build charms
    uses: canonical/data-platform-workflows/.github/workflows/build_charms_with_cache.yaml@main

  collect-tests:
    name: Collect integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install tox
        # TODO: Consider replacing with custom image on self-hosted runner OR pinning version
        run: python3 -m pip install tox
      - name: Select tests
        id: select-tests
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]
          then
            echo Running flaky and non-flaky tests
            echo "mark_expression=" >> $GITHUB_OUTPUT
          else
            echo Skipping flaky tests
            echo "mark_expression=not flaky" >> $GITHUB_OUTPUT
          fi
      - name: Collect tests
        id: collect-tests
        shell: python
        run: |
          import json
          import os
          import subprocess
          
          output = subprocess.check_output(
              [
                  "tox",
                  "-qq",
                  "run",
                  "-e",
                  "integration",
                  "--",
                  "pytest",
                  "--quiet",
                  "--color=no",
                  "--collect-only",
                  "tests/integration/",
                  "-m '${{ steps.select-tests.outputs.mark_expression }}'"
              ],
              encoding="utf-8",
          )
          """
          Example output (every line before the first empty line is a test):
          tests/integration/test_tls.py::test_connection_before_tls
          tests/integration/high_availability/test_replication.py::test_consistent_data_replication_across_cluster
          tests/integration/high_availability/test_replication.py::test_kill_primary_check_reelection
          
          3 tests collected in 0.02s
          """
          output = output.split("\n")
          tests = output[: output.index("")]
          with open(os.environ["GITHUB_OUTPUT"], "a") as file:
              file.write(f"tests={json.dumps(tests)}")
    outputs:
      tests: ${{ steps.collect-tests.outputs.tests }}



  integration-test:
    strategy:
      fail-fast: false
      matrix:
        tests: ${{ fromJSON(needs.collect-tests.outputs.tests) }}
        ubuntu-versions:
          # Update whenever charmcraft.yaml is changed
          - series: focal
            bases-index: 0
          - series: jammy
            bases-index: 1
    name: ${{ matrix.tests }} | ${{ matrix.ubuntu-versions.series }}
    needs:
      - lint
      - unit-test
      - build
      - collect-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup operator environment
        # TODO: Replace with custom image on self-hosted runner
        uses: charmed-kubernetes/actions-operator@main
        with:
          provider: lxd
          bootstrap-options: "--agent-version 2.9.29"
      - name: Download packed charm(s)
        uses: actions/download-artifact@v3
        with:
          name: charms-packed-with-cache
      - name: Select tests
        id: select-tests
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]
          then
            echo Running flaky and non-flaky tests
            echo "mark_expression=" >> $GITHUB_OUTPUT
          else
            echo Skipping flaky tests
            echo "mark_expression=not flaky" >> $GITHUB_OUTPUT
          fi
      - name: Run integration test
        run: tox run -e integration -- pytest -v --tb native --log-cli-level=INFO -s ${{ matrix.tests }} --mysql-charm-series=${{ matrix.ubuntu-versions.series }} --mysql-charm-bases-index=${{ matrix.ubuntu-versions.bases-index }}
        env:
          CI_PACKED_CHARMS: ${{ needs.build.outputs.charms }}
